!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!JavaProperties	k,key	/keys/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!JavaProperties	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/aeb/Arduino/WaveReader/RealTimeFFT/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
REALTIMEFFT_H	src/fft.h	/^#define REALTIMEFFT_H$/;"	d
RealTimeFFT	src/fft.cpp	/^RealTimeFFT::RealTimeFFT(float samplingFrequency, size_t sampleSize)$/;"	f	class:RealTimeFFT
RealTimeFFT	src/fft.h	/^class RealTimeFFT {$/;"	c
_bufferFull	src/fft.h	/^    volatile bool _bufferFull;$/;"	m	class:RealTimeFFT	typeref:typename:volatile bool
_bufferIndex	src/fft.h	/^    volatile int _bufferIndex;$/;"	m	class:RealTimeFFT	typeref:typename:volatile int
_imaginary	src/fft.h	/^    float *_imaginary;$/;"	m	class:RealTimeFFT	typeref:typename:float *
_magnitude	src/fft.h	/^    float *_magnitude;$/;"	m	class:RealTimeFFT	typeref:typename:float *
_real	src/fft.h	/^    float *_real;$/;"	m	class:RealTimeFFT	typeref:typename:float *
_sampleSize	src/fft.h	/^    size_t _sampleSize;$/;"	m	class:RealTimeFFT	typeref:typename:size_t
_samplingFrequency	src/fft.h	/^    float _samplingFrequency;$/;"	m	class:RealTimeFFT	typeref:typename:float
addSample	src/fft.cpp	/^void RealTimeFFT::addSample(float value) {$/;"	f	class:RealTimeFFT	typeref:typename:void
architectures	library.properties	/^architectures=$/;"	k
author	library.properties	/^author=Andre Barroso <andre.barroso@gmail.com>$/;"	k
begin	src/fft.cpp	/^void RealTimeFFT::begin() {$/;"	f	class:RealTimeFFT	typeref:typename:void
category	library.properties	/^category=Output$/;"	k
computeAndPrintFFT	src/fft.cpp	/^void RealTimeFFT::computeAndPrintFFT() {$/;"	f	class:RealTimeFFT	typeref:typename:void
esp_fft	README.md	/^# esp_fft$/;"	c
maintainer	library.properties	/^maintainer=Andre Barroso <andre.barroso@gmail.com>$/;"	k
name	library.properties	/^name=RealTimeFFT$/;"	k
paragraph	library.properties	/^paragraph=A library to enable the calculation of a Fast Fourier Transform (FFT) directly within /;"	k
process	src/fft.cpp	/^void RealTimeFFT::process() {$/;"	f	class:RealTimeFFT	typeref:typename:void
sentence	library.properties	/^sentence=A library to allow the calculation of an fast fourier transform on hte void loop.$/;"	k
url	library.properties	/^url=https:\/\/github.com\/aebarroso\/esp_fft.git$/;"	k
version	library.properties	/^version=1.0.0$/;"	k
~RealTimeFFT	src/fft.cpp	/^RealTimeFFT::~RealTimeFFT() {$/;"	f	class:RealTimeFFT
